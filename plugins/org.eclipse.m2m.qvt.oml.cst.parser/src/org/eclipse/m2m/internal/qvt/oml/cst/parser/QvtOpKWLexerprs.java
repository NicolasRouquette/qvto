/**
* Essential OCL Keyword Lexer
* <copyright>
*
* Copyright (c) 2005, 2009 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
*   E.D.Willink - Bug 285633, 292112
* </copyright>
*
* $Id: QvtOpKWLexerprs.java,v 1.79.4.6 2009/11/12 08:59:21 sboyko Exp $
*/
/**
* Complete OCL Keyword Lexer
* <copyright>
*
* Copyright (c) 2005, 2009 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Bug 292112
* </copyright>
*/
/**
* <copyright>
*
* Copyright (c) 2006-2008 Borland Inc.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Borland - Initial API and implementation
*
* </copyright>
*
* $Id: QvtOpKWLexerprs.java,v 1.79.4.6 2009/11/12 08:59:21 sboyko Exp $
*/

package org.eclipse.m2m.internal.qvt.oml.cst.parser;

public class QvtOpKWLexerprs implements lpg.lpgjavaruntime.ParseTable, QvtOpKWLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            4,2,4,4,5,3,2,3,3,7,
            3,2,4,5,3,3,8,10,10,6,
            7,16,4,7,5,6,7,10,4,7,
            4,10,6,1,3,5,3,6,14,6,
            7,9,9,6,8,6,6,7,5,6,
            5,4,3,13,10,12,8,9,5,3,
            4,3,4,3,6,4,7,10,9,12,
            10,13,12,15,9,4,5,7,6,7,
            8,8,6,4,4,6,4,7,8,9,
            10,13,16,7,6,7,4,4,5,8,
            11,8,8,7,7,2,4,4,6,9,
            4,7,7,9,5,8,10,3,3,7,
            9
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            1,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,125,34,17,232,235,136,88,
            137,93,139,125,159,148,53,36,151,229,
            178,237,243,150,238,152,162,103,66,51,
            68,73,71,111,83,115,105,61,87,221,
            248,250,251,166,95,249,253,117,256,260,
            261,264,41,165,206,258,142,173,174,267,
            26,270,271,273,272,275,276,279,281,18,
            282,182,285,286,291,288,295,183,298,292,
            301,303,299,309,307,311,312,302,314,317,
            321,320,323,322,187,156,188,319,324,121,
            190,46,326,334,335,337,343,344,347,348,
            350,349,351,355,352,359,361,362,366,132,
            363,367,370,372,198,201,373,377,380,381,
            382,385,390,392,386,393,394,396,200,397,
            398,401,404,411,84,415,413,417,419,420,
            407,193,425,426,428,424,430,434,436,437,
            438,442,444,446,451,453,455,457,449,460,
            459,461,465,467,468,471,472,476,473,480,
            482,205,214,486,487,216,478,483,491,490,
            492,495,498,218,496,499,508,507,501,512,
            513,515,516,517,521,522,518,528,519,525,
            531,530,534,536,543,541,545,547,549,551,
            552,553,556,557,558,560,562,569,571,572,
            575,576,579,577,581,583,585,589,590,591,
            592,593,595,594,603,596,604,605,609,608,
            612,617,620,614,622,623,624,627,629,630,
            636,632,635,640,642,643,646,645,631,651,
            654,655,659,661,662,664,666,667,670,671,
            673,672,677,678,682,679,684,687,689,690,
            692,696,693,698,699,702,700,706,707,710,
            711,714,718,719,725,723,720,730,731,727,
            734,736,739,737,740,742,743,749,744,747,
            752,755,756,759,765,766,760,769,771,772,
            774,775,776,777,782,778,783,789,785,792,
            788,793,795,797,796,800,801,804,810,811,
            814,812,816,818,819,820,824,825,828,831,
            829,832,835,837,842,845,844,838,848,851,
            852,854,858,857,859,860,220,861,865,864,
            866,869,224,880,870,878,884,886,882,889,
            867,892,897,899,902,904,900,905,907,908,
            910,890,911,913,917,919,921,923,927,928,
            931,932,930,936,939,940,941,942,947,943,
            945,955,949,950,956,959,961,962,965,968,
            969,970,972,974,979,976,981,982,984,986,
            988,993,991,995,336,996,1001,1004,225,997,
            1000,1005,1011,1012,1014,1017,1018,1022,1023,1019,
            1025,1027,1029,1030,1032,1033,1036,1038,1040,1041,
            1045,593,593
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,0,0,18,19,
            20,21,22,23,24,0,1,27,28,4,
            30,31,32,16,34,0,1,37,38,39,
            0,6,2,3,9,0,6,2,8,4,
            0,1,0,1,9,15,4,41,6,9,
            0,9,12,18,19,0,1,0,8,4,
            0,6,0,3,9,8,9,10,8,7,
            10,14,0,0,12,13,0,0,6,7,
            3,21,0,21,0,8,10,5,6,17,
            18,9,0,20,0,1,2,13,6,7,
            0,9,29,3,0,5,0,3,35,3,
            0,5,0,40,0,1,6,23,14,15,
            14,0,12,2,24,0,0,17,0,8,
            5,0,7,7,6,9,15,0,1,0,
            0,0,11,6,4,0,7,6,0,10,
            9,0,1,2,0,0,11,12,18,4,
            12,7,0,0,9,2,4,0,1,15,
            7,0,0,2,2,13,0,0,2,0,
            1,4,0,4,0,8,10,0,1,0,
            0,4,3,21,0,0,7,2,27,9,
            6,7,12,0,22,0,1,0,5,0,
            0,1,9,0,0,33,9,8,0,12,
            15,0,9,9,0,4,0,0,4,3,
            12,22,0,20,20,3,9,0,0,0,
            0,1,0,6,5,0,8,0,6,0,
            0,1,7,0,5,8,0,4,2,0,
            0,0,0,2,0,0,6,5,0,5,
            0,0,13,5,0,0,11,0,7,9,
            0,0,7,9,0,5,2,0,0,2,
            0,0,0,16,2,5,0,9,0,1,
            0,0,6,0,23,2,0,7,0,0,
            0,0,0,0,13,0,25,11,8,10,
            8,13,11,0,0,0,0,4,13,16,
            6,5,0,0,2,2,0,0,0,0,
            0,0,6,4,0,20,8,10,0,1,
            0,0,0,12,14,0,0,13,8,0,
            5,0,0,7,13,13,0,8,6,0,
            0,0,11,4,0,0,6,6,12,0,
            1,0,0,0,3,0,0,0,13,6,
            0,5,5,0,0,5,0,4,16,25,
            0,1,0,18,0,1,0,5,0,0,
            14,5,4,0,0,0,1,0,1,0,
            7,12,8,0,5,0,0,0,5,0,
            5,0,1,0,1,0,9,2,0,13,
            0,1,0,1,0,1,0,1,0,0,
            0,1,14,4,0,1,0,0,1,3,
            0,0,0,15,3,0,1,0,8,0,
            1,0,0,2,12,0,0,2,2,0,
            0,0,1,4,0,0,1,0,0,5,
            0,1,4,26,14,8,0,0,26,2,
            4,0,0,1,0,0,0,0,0,3,
            0,0,7,9,0,5,5,0,17,0,
            0,14,2,0,7,0,12,19,5,4,
            0,12,0,1,0,1,0,1,0,1,
            0,0,0,1,14,0,0,0,3,0,
            3,0,1,0,14,9,7,16,0,1,
            0,0,1,3,0,0,0,3,0,1,
            0,6,0,7,0,1,6,5,0,0,
            0,0,0,0,0,0,8,7,7,10,
            8,7,0,0,0,3,13,0,0,2,
            15,0,8,0,11,7,0,1,7,0,
            7,0,0,0,5,4,0,4,0,0,
            0,0,10,4,0,0,10,2,7,0,
            6,0,0,2,0,0,16,8,3,21,
            0,7,10,0,0,1,3,7,0,1,
            0,0,2,0,1,0,0,1,3,0,
            0,0,0,2,5,3,0,0,0,3,
            19,0,4,0,1,8,0,17,0,0,
            9,0,0,4,8,0,1,0,0,0,
            1,0,10,6,3,0,0,19,17,0,
            0,1,6,0,16,10,7,0,0,0,
            2,4,0,10,0,1,0,8,6,0,
            0,2,2,0,1,0,0,11,0,0,
            4,0,0,0,2,4,0,8,0,1,
            15,0,14,2,0,0,10,2,0,0,
            1,18,4,9,0,0,2,2,0,1,
            0,0,2,0,0,0,0,0,1,3,
            5,0,0,12,0,12,12,0,0,8,
            2,0,0,11,0,0,0,13,2,0,
            0,10,7,0,17,11,6,8,16,0,
            0,0,2,0,11,0,3,0,0,0,
            11,10,5,0,0,2,2,0,0,10,
            0,0,4,18,0,17,0,0,11,8,
            10,0,1,0,0,9,2,0,11,15,
            0,0,9,0,1,8,0,0,0,0,
            0,1,4,0,0,0,0,8,0,0,
            7,2,22,17,10,24,19,0,10,0,
            1,0,17,0,1,0,1,6,0,0,
            13,0,3,5,28,4,0,1,0,0,
            2,0,1,0,0,2,0,0,9,0,
            0,7,0,1,5,8,0,11,0,1,
            0,11,0,3,2,9,0,0,1,0,
            0,0,6,3,3,0,1,8,0,0,
            0,0,0,5,0,4,0,1,0,0,
            11,9,8,4,0,0,16,3,0,1,
            0,0,14,3,0,1,5,0,0,0,
            2,0,1,0,19,0,9,8,0,1,
            0,0,2,0,3,0,11,0,1,6,
            0,6,0,1,0,0,0,7,4,0,
            0,6,2,0,0,2,10,3,9,36,
            0,0,2,0,1,4,0,0,0,3,
            3,0,0,2,0,3,0,1,0,0,
            12,0,0,9,3,0,7,0,3,0,
            0,1,3,6,0,0,0,0,0,5,
            22,0,20,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            593,153,154,149,155,148,152,135,156,151,
            131,136,129,130,137,147,593,593,133,132,
            142,128,143,138,150,593,258,134,146,259,
            145,144,127,609,126,593,178,140,139,141,
            593,177,247,246,176,12,243,297,245,300,
            593,199,593,173,298,244,175,592,174,201,
            593,699,200,299,301,593,198,593,226,197,
            593,196,593,213,195,203,205,202,212,209,
            211,204,593,593,208,206,593,593,218,219,
            161,210,593,207,593,162,227,166,165,217,
            220,167,593,342,593,225,224,234,194,192,
            593,193,344,215,593,216,593,221,341,239,
            593,238,593,343,593,169,293,223,222,595,
            237,593,294,315,214,593,593,712,593,316,
            160,593,159,163,168,164,317,593,172,593,
            593,593,252,171,179,593,186,189,593,185,
            188,593,191,190,593,593,289,288,180,232,
            170,248,593,593,233,256,253,593,182,249,
            255,593,593,608,274,254,593,593,287,593,
            296,290,593,295,593,291,286,593,322,593,
            593,323,645,275,593,593,336,250,269,325,
            372,371,324,593,350,593,377,593,374,593,
            593,228,373,67,71,351,383,525,593,384,
            594,593,531,576,593,157,593,593,158,183,
            181,526,593,530,575,184,187,593,593,593,
            593,231,593,229,230,593,235,593,236,593,
            593,241,646,593,240,251,593,242,257,593,
            593,593,593,263,593,593,261,262,593,264,
            593,593,260,266,593,593,265,593,268,267,
            593,593,271,270,593,272,273,593,593,604,
            593,593,593,657,602,276,593,277,593,278,
            593,593,279,593,655,630,7,601,593,593,
            593,593,593,593,280,593,281,282,283,284,
            285,292,599,593,593,68,593,303,302,711,
            304,305,593,593,691,690,593,593,593,593,
            593,593,306,308,593,571,669,307,593,680,
            593,593,593,311,309,593,593,310,312,593,
            314,593,593,319,313,318,593,320,326,593,
            593,593,321,328,593,60,329,330,327,593,
            332,593,593,593,677,593,593,593,333,335,
            593,337,338,593,593,616,593,339,334,331,
            593,340,593,659,593,345,593,346,593,593,
            704,347,348,593,593,593,656,593,353,593,
            354,349,352,593,622,593,593,593,355,593,
            356,593,358,593,359,593,357,360,593,654,
            593,361,593,362,593,363,593,364,593,35,
            593,597,701,365,593,366,593,593,606,367,
            593,593,593,700,596,593,368,593,678,593,
            370,593,593,624,369,593,593,375,376,593,
            593,593,381,380,593,593,385,593,593,382,
            593,389,386,692,379,652,593,593,378,387,
            388,593,593,708,593,593,593,593,593,392,
            593,593,391,390,593,393,394,593,642,593,
            593,395,399,593,396,593,398,397,401,402,
            593,400,593,403,593,670,593,629,593,618,
            593,593,593,407,404,593,593,593,408,593,
            410,593,412,593,405,409,411,406,593,413,
            593,593,415,414,593,593,593,416,593,607,
            593,417,593,418,593,421,419,420,593,593,
            593,593,593,593,593,593,422,424,425,423,
            426,427,593,593,593,429,428,593,593,644,
            598,593,431,593,430,432,593,434,433,593,
            436,593,593,593,435,437,593,439,593,593,
            593,593,438,442,593,593,440,443,444,593,
            445,593,593,447,593,593,451,446,449,441,
            593,450,448,593,593,453,452,643,593,454,
            593,593,676,593,640,593,593,456,639,593,
            593,593,593,460,457,459,593,593,593,461,
            455,593,463,593,464,637,593,458,593,593,
            462,593,593,467,465,593,468,593,593,593,
            688,593,469,470,471,593,593,466,619,593,
            593,475,473,593,613,472,474,593,593,593,
            631,477,593,476,593,478,593,672,479,593,
            593,658,480,593,482,593,593,481,593,593,
            485,593,593,593,633,487,593,486,593,488,
            483,593,484,489,593,593,626,491,593,593,
            495,679,492,490,593,593,493,494,593,689,
            593,593,496,593,593,593,593,593,502,501,
            500,593,593,497,593,498,499,593,593,671,
            697,593,593,698,593,593,593,503,507,593,
            593,504,614,593,505,506,509,508,641,593,
            593,593,511,593,620,593,617,593,593,593,
            510,512,705,593,593,681,514,593,109,513,
            593,593,516,687,593,634,593,593,706,673,
            515,593,518,593,593,517,519,593,623,713,
            593,593,520,593,522,603,593,593,593,593,
            593,695,524,593,593,593,593,693,593,593,
            528,532,521,650,527,674,523,593,529,593,
            696,593,709,593,534,593,535,536,593,593,
            533,593,545,537,538,539,593,610,593,593,
            682,593,540,593,593,675,593,593,541,593,
            593,542,593,707,544,638,593,543,593,547,
            593,714,593,548,549,546,593,593,551,593,
            593,593,550,662,552,593,668,636,593,593,
            593,593,593,635,593,555,593,556,593,593,
            553,557,651,559,593,593,554,703,593,683,
            593,593,558,648,593,684,561,593,593,593,
            563,593,564,593,560,593,562,710,593,625,
            593,593,612,593,611,593,621,593,568,566,
            593,567,593,569,593,593,593,694,570,593,
            593,572,573,593,593,574,577,663,578,565,
            593,593,579,593,649,580,593,593,593,666,
            581,593,593,582,593,647,593,585,92,593,
            583,593,72,584,632,593,587,593,589,593,
            593,686,667,590,593,593,593,593,593,615,
            586,593,588
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 467,
           NT_OFFSET         = 54,
           LA_STATE_OFFSET   = 714,
           MAX_LA            = 1,
           NUM_RULES         = 121,
           NUM_NONTERMINALS  = 3,
           NUM_SYMBOLS       = 57,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 122,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 41,
           EOLT_SYMBOL       = 55,
           ACCEPT_ACTION     = 592,
           ERROR_ACTION      = 593;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
