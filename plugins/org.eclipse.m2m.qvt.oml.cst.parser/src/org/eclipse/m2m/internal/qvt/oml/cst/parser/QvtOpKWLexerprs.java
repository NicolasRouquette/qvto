/**
* Essential OCL Keyword Lexer
* <copyright>
*
* Copyright (c) 2005, 2009 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
*   E.D.Willink - Bug 285633, 292112
* </copyright>
*
* $Id: QvtOpKWLexerprs.java,v 1.79.4.3 2009/10/29 08:50:31 sboyko Exp $
*/
/**
* Complete OCL Keyword Lexer
* <copyright>
*
* Copyright (c) 2005, 2009 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Bug 292112
* </copyright>
*/
/**
* <copyright>
*
* Copyright (c) 2006-2008 Borland Inc.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Borland - Initial API and implementation
*
* </copyright>
*
* $Id: QvtOpKWLexerprs.java,v 1.79.4.3 2009/10/29 08:50:31 sboyko Exp $
*/

package org.eclipse.m2m.internal.qvt.oml.cst.parser;

public class QvtOpKWLexerprs implements lpg.lpgjavaruntime.ParseTable, QvtOpKWLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            4,2,4,4,5,3,2,3,3,7,
            3,2,4,5,3,3,8,10,10,7,
            6,6,8,3,3,7,6,6,13,8,
            7,6,7,16,4,7,5,6,7,10,
            4,7,4,10,6,1,3,5,3,6,
            14,6,7,9,9,6,8,6,6,7,
            5,6,5,4,3,13,10,12,8,9,
            5,3,4,3,4,3,6,4,7,10,
            9,12,10,13,12,15,9,4,5,7,
            6,7,8,8,6,4,4,6,4,7,
            8,9,10,13,16,7,6,7,4,4,
            5,8,11,8,8,7,7,2,4,4,
            6,9,4,7,7,9,5,8,10,3,
            3,7,9
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            1,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,2,2,2,2,
            2,2,2,2,2,2,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,137,46,66,137,240,
            116,153,29,120,88,243,73,110,157,248,
            205,249,251,159,121,163,250,168,181,124,
            83,135,85,47,93,45,97,53,100,108,
            42,261,256,263,265,162,245,267,270,271,
            178,273,164,268,184,189,278,186,277,281,
            282,283,287,41,174,192,72,286,284,293,
            294,296,297,193,298,301,300,302,309,202,
            310,305,314,315,316,321,318,324,323,327,
            332,328,333,335,337,338,198,138,199,203,
            339,341,16,214,342,345,61,348,349,351,
            355,354,363,364,367,368,369,371,62,357,
            372,377,379,381,380,383,382,392,394,387,
            389,395,396,219,398,401,402,409,410,412,
            415,220,216,416,418,419,421,423,427,425,
            149,429,106,433,431,436,439,440,441,117,
            444,445,447,450,453,454,456,451,458,465,
            468,461,470,472,474,476,478,479,480,481,
            485,487,489,490,494,495,500,501,504,502,
            506,509,227,230,510,513,516,231,496,517,
            519,520,521,525,526,528,529,530,532,535,
            539,536,537,541,549,551,553,546,556,557,
            559,562,561,565,566,563,567,570,576,575,
            229,578,583,584,589,591,593,586,594,598,
            599,601,603,607,609,610,611,613,615,616,
            619,620,623,626,627,630,633,632,629,640,
            644,631,641,645,649,648,651,655,654,659,
            662,663,665,664,667,672,666,675,677,678,
            679,682,684,687,683,685,692,697,698,702,
            694,704,705,709,710,713,715,716,718,720,
            722,721,725,727,731,726,732,736,737,738,
            739,740,744,741,748,747,750,758,752,754,
            761,763,765,767,768,771,774,776,778,779,
            780,785,786,787,789,790,792,793,795,797,
            800,801,808,798,810,806,811,812,822,815,
            823,826,818,830,827,831,833,834,835,836,
            837,839,847,849,842,852,855,857,859,860,
            861,862,863,866,865,867,875,879,870,869,
            883,881,884,886,890,891,885,893,898,899,
            900,901,904,906,908,911,912,914,916,917,
            918,921,924,925,926,927,929,933,934,936,
            932,938,233,949,941,950,951,150,953,956,
            604,955,963,965,968,970,957,971,973,975,
            976,977,979,982,980,987,984,990,996,992,
            989,1001,1003,1004,1008,1005,1011,1014,1015,1009,
            1018,1019,1021,1023,1024,1025,1029,1031,1034,1037,
            1032,1036,1042,1038,1044,1045,1048,1052,1053,1055,
            1056,1060,1059,1061,1064,1068,1070,1071,1073,1074,
            1079,1080,1083,237,1084,1088,1087,1089,1092,1094,
            1100,1102,1103,1095,1108,1110,1104,1109,1113,1116,
            1097,1117,1121,1122,1124,1125,1126,1133,640,640
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,0,16,0,18,19,
            20,21,22,8,24,25,26,12,0,29,
            15,31,32,33,34,7,36,9,38,39,
            0,0,2,3,0,5,0,3,8,3,
            6,10,0,7,2,3,16,5,12,13,
            0,0,2,23,4,0,14,21,16,9,
            26,0,0,1,3,14,4,6,18,19,
            8,9,0,1,0,14,4,0,1,5,
            8,9,0,9,10,3,0,5,14,0,
            1,2,10,7,8,0,41,0,9,0,
            1,15,5,21,18,0,0,8,9,0,
            0,6,7,0,25,20,6,8,8,9,
            7,8,9,28,0,1,0,0,22,2,
            4,4,37,9,28,40,12,10,0,0,
            2,35,0,5,5,3,0,5,0,1,
            4,0,0,0,16,4,8,0,5,7,
            9,22,10,0,18,8,9,0,5,30,
            0,1,2,0,7,0,1,4,0,4,
            2,0,0,16,2,7,13,0,0,8,
            9,0,0,2,0,1,4,5,11,11,
            12,0,15,0,1,0,24,4,0,0,
            1,3,21,4,9,7,0,12,0,0,
            0,1,0,7,8,6,0,9,9,0,
            12,9,0,4,0,9,16,0,0,0,
            0,3,20,3,12,0,20,13,9,12,
            0,1,0,8,0,1,0,0,6,0,
            0,1,0,7,2,6,0,0,11,2,
            0,0,0,0,2,0,0,6,8,13,
            4,6,0,0,11,0,0,0,6,0,
            0,0,9,7,0,6,9,7,0,0,
            2,2,17,0,0,0,2,0,17,6,
            0,1,0,0,9,8,0,0,1,25,
            7,0,0,2,0,13,0,0,0,5,
            0,0,5,11,0,1,10,0,0,23,
            0,13,4,0,0,0,0,17,8,6,
            13,7,0,0,2,2,0,0,0,13,
            0,0,4,32,8,5,0,10,0,0,
            0,0,0,12,4,7,0,8,0,13,
            8,0,1,0,0,0,3,0,0,13,
            0,0,8,6,23,17,6,6,0,0,
            1,0,4,18,0,0,5,0,0,1,
            0,1,0,8,0,11,0,5,0,12,
            0,5,0,1,6,0,6,13,0,0,
            0,6,4,0,0,1,0,1,5,0,
            0,12,0,0,14,0,7,0,6,6,
            0,6,2,13,0,1,9,0,1,0,
            1,0,1,0,1,0,1,0,0,0,
            0,0,5,4,0,1,0,1,0,0,
            1,3,14,0,0,0,16,3,5,0,
            0,0,3,0,1,0,1,7,0,0,
            2,2,0,12,2,0,0,2,0,0,
            0,1,27,4,0,0,1,0,0,0,
            6,0,14,2,0,0,0,1,0,4,
            0,12,15,27,6,0,12,19,0,1,
            0,1,0,1,14,0,0,1,0,14,
            0,0,0,3,0,0,0,9,7,0,
            6,6,17,7,0,0,14,0,0,10,
            5,4,0,0,2,0,12,4,0,1,
            0,1,0,0,9,3,3,0,0,1,
            0,1,0,0,7,3,0,1,0,0,
            0,3,0,1,0,0,6,8,0,0,
            1,7,0,8,6,0,0,5,0,0,
            0,0,0,7,31,10,7,5,7,0,
            0,13,3,0,0,2,16,0,0,5,
            0,11,4,0,0,8,2,7,0,1,
            7,0,0,0,0,0,0,6,4,7,
            4,0,1,10,0,10,0,0,0,2,
            4,0,0,0,0,7,0,1,6,8,
            7,0,0,0,3,21,0,0,2,15,
            3,0,9,0,0,1,5,4,0,0,
            1,3,0,1,0,0,2,0,1,0,
            0,0,3,2,0,0,0,7,2,5,
            0,0,7,3,19,0,0,0,0,0,
            0,5,4,0,1,10,0,0,17,0,
            10,0,3,0,15,8,19,0,1,6,
            0,10,0,17,0,1,0,0,8,7,
            0,4,2,0,1,0,10,0,0,0,
            2,2,5,8,0,0,0,1,0,0,
            5,0,0,2,0,11,0,0,4,0,
            0,5,2,4,16,0,14,0,1,0,
            0,0,2,24,0,18,11,0,4,10,
            9,0,0,2,2,0,0,2,11,0,
            0,2,0,0,0,0,0,2,0,13,
            10,0,1,7,6,11,0,15,0,3,
            17,0,1,5,0,1,0,1,0,0,
            0,0,0,2,0,0,0,5,0,0,
            12,12,12,8,0,11,2,11,0,10,
            0,3,0,0,0,0,18,2,6,0,
            0,2,0,10,10,15,4,0,0,0,
            0,11,5,0,1,0,1,0,9,2,
            0,0,12,0,16,0,0,0,5,9,
            0,1,11,0,0,0,0,1,0,4,
            2,0,0,0,1,0,1,0,22,15,
            0,1,19,26,29,13,15,10,0,0,
            0,0,0,5,0,0,0,7,4,10,
            8,6,0,1,0,9,2,0,1,0,
            0,2,0,1,0,0,0,7,0,0,
            5,0,6,0,3,11,0,1,0,0,
            11,0,9,15,5,0,1,6,0,11,
            0,1,0,0,0,3,3,0,0,2,
            0,1,8,0,0,1,3,0,0,1,
            0,4,0,0,0,17,3,5,0,9,
            0,0,4,0,1,0,0,0,14,3,
            5,0,1,0,0,2,9,0,1,19,
            6,0,0,1,0,0,5,2,0,0,
            0,30,3,0,1,11,8,0,8,0,
            0,0,0,0,1,8,4,7,0,0,
            2,2,0,0,2,2,0,0,0,20,
            3,0,1,0,0,9,0,4,10,0,
            1,0,0,0,3,3,12,0,0,0,
            3,2,0,1,11,0,0,9,22,3,
            0,0,7,0,0,0,3,3,0,8,
            0,6,0,1,0,0,0,0,0,0,
            20,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            640,165,166,161,167,168,160,153,164,163,
            154,146,141,142,147,640,159,640,144,143,
            152,140,155,312,145,148,162,313,640,157,
            771,158,151,156,139,175,138,176,150,149,
            640,640,274,273,640,272,640,228,270,221,
            229,243,640,222,235,236,271,234,220,218,
            12,640,318,275,321,640,237,219,642,319,
            227,640,640,180,280,331,182,281,320,322,
            181,758,640,210,640,279,209,640,178,215,
            208,207,640,217,214,226,640,225,216,640,
            241,239,224,232,231,640,639,640,240,640,
            185,230,242,223,233,640,640,184,183,640,
            640,172,171,640,238,366,195,177,194,196,
            204,206,205,368,640,211,640,640,374,305,
            169,306,365,213,376,367,212,304,640,26,
            361,375,640,362,576,173,640,174,640,193,
            186,640,640,640,363,248,192,640,256,198,
            249,577,197,640,187,201,200,640,276,578,
            640,203,202,640,253,640,263,258,640,264,
            261,640,640,254,655,260,259,640,640,277,
            278,640,640,292,640,189,309,310,646,308,
            307,640,664,640,315,640,287,314,640,640,
            351,704,293,352,354,344,640,353,640,640,
            640,406,79,399,400,402,83,432,401,640,
            433,573,640,170,640,622,641,640,640,640,
            640,190,572,191,179,640,621,250,199,188,
            640,244,640,245,640,247,640,640,246,640,
            640,252,640,705,255,251,640,640,257,262,
            640,640,640,640,268,640,640,267,266,265,
            269,282,640,640,283,640,640,640,284,640,
            640,640,285,286,640,290,288,289,640,640,
            291,651,656,640,640,640,649,640,716,294,
            640,296,640,640,295,297,640,640,665,714,
            648,640,7,689,640,298,640,640,640,301,
            640,640,303,300,640,317,302,640,640,299,
            640,311,324,640,640,640,640,770,325,327,
            323,326,640,640,750,749,640,640,640,332,
            640,640,330,316,328,728,640,329,640,640,
            640,640,640,333,336,335,72,337,640,334,
            338,640,340,640,640,640,736,640,640,341,
            640,640,343,345,339,342,346,675,640,640,
            348,640,347,718,640,640,349,640,640,357,
            640,739,640,355,640,350,640,358,640,356,
            640,359,640,369,364,640,370,360,640,640,
            640,371,372,640,640,715,640,378,377,640,
            640,373,640,640,763,640,379,640,681,380,
            640,381,385,713,640,383,382,640,384,640,
            386,640,387,640,388,640,389,640,640,47,
            640,640,390,391,640,644,640,392,640,640,
            653,393,760,640,640,640,759,643,737,640,
            640,640,394,640,396,640,398,395,640,640,
            683,403,640,397,404,640,640,405,640,640,
            640,410,751,409,640,640,412,640,640,640,
            411,640,408,415,640,640,640,419,640,418,
            640,414,701,407,417,640,416,413,640,729,
            640,688,640,677,420,640,640,767,640,421,
            640,640,640,425,640,640,640,423,424,640,
            426,427,422,429,640,640,428,640,640,430,
            711,434,640,640,435,640,431,436,640,437,
            640,438,640,640,440,439,441,640,640,443,
            640,444,640,640,442,445,640,446,640,640,
            640,447,640,654,640,640,449,448,640,640,
            453,450,640,451,452,640,640,454,640,640,
            640,640,640,456,581,455,457,458,459,640,
            640,460,461,640,640,462,645,640,640,464,
            640,463,465,640,640,466,703,467,640,469,
            468,640,640,640,640,640,640,470,472,471,
            474,640,475,473,640,476,640,640,640,479,
            478,640,640,640,640,480,640,482,483,481,
            702,640,640,640,485,477,640,640,486,484,
            487,640,488,640,640,490,696,489,640,640,
            492,491,640,493,640,640,735,640,699,640,
            640,640,698,668,640,640,640,495,497,496,
            640,640,499,498,494,640,640,640,640,640,
            640,502,504,640,505,501,640,640,500,640,
            506,640,508,640,678,507,503,640,747,661,
            640,509,640,672,640,512,640,640,510,511,
            640,514,690,640,515,640,513,640,640,640,
            717,517,731,516,640,640,640,519,640,640,
            662,640,640,522,640,518,640,640,524,640,
            640,525,692,526,520,640,523,640,527,640,
            640,640,529,521,640,738,528,640,532,685,
            530,640,640,531,533,640,640,534,757,640,
            640,756,640,640,640,640,640,539,640,535,
            536,640,542,673,540,538,640,537,640,541,
            700,640,671,730,640,543,640,748,640,640,
            640,640,640,547,640,640,640,548,640,640,
            544,545,546,549,640,679,551,550,640,552,
            640,676,640,640,640,640,746,740,764,640,
            640,554,121,553,555,693,556,640,640,640,
            640,765,732,640,660,640,559,640,557,560,
            640,640,558,640,772,640,27,640,650,561,
            640,564,682,640,640,640,640,755,640,566,
            567,640,640,640,569,640,570,640,563,709,
            640,754,565,733,562,568,768,571,640,640,
            640,640,640,752,640,640,640,575,582,574,
            579,580,640,657,640,584,741,640,583,640,
            640,734,640,663,640,640,640,585,640,640,
            697,640,587,640,588,586,640,766,640,640,
            773,640,589,670,695,640,727,694,640,590,
            640,591,640,640,640,721,592,640,640,593,
            640,595,594,640,640,597,596,640,640,600,
            640,599,640,640,640,598,762,710,640,601,
            640,640,603,640,742,640,640,640,602,707,
            769,640,606,640,640,608,607,640,743,604,
            609,640,640,684,640,640,610,659,640,640,
            640,605,658,640,613,680,611,640,612,80,
            640,640,640,640,617,614,616,753,640,640,
            618,619,640,640,620,623,640,640,640,615,
            722,640,626,640,640,624,104,627,625,640,
            708,640,640,640,725,628,629,640,640,640,
            706,630,640,632,669,640,640,631,634,691,
            84,640,633,640,640,640,637,726,640,636,
            640,674,640,745,640,640,640,640,640,640,
            635
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 502,
           NT_OFFSET         = 54,
           LA_STATE_OFFSET   = 773,
           MAX_LA            = 1,
           NUM_RULES         = 133,
           NUM_NONTERMINALS  = 3,
           NUM_SYMBOLS       = 57,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 134,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 41,
           EOLT_SYMBOL       = 55,
           ACCEPT_ACTION     = 639,
           ERROR_ACTION      = 640;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
