/**
* Essential OCL Lexer
* <copyright>
*
* Copyright (c) 2005, 2009 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
*   Borland - Bug 242880
*   E.D.Willink - Bug 292112
* </copyright>
*
* $Id: QvtOpLexerprs.java,v 1.79.4.5 2009/11/11 22:09:50 sboyko Exp $
*/
/**
* Complete OCL Lexer
* <copyright>
*
* Copyright (c) 2005, 2009 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Bug 292112, 292594
* </copyright>
*/
/**
* <copyright>
*
* Copyright (c) 2006-2008 Borland Inc.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   Borland - Initial API and implementation
*
* </copyright>
*
* $Id: QvtOpLexerprs.java,v 1.79.4.5 2009/11/11 22:09:50 sboyko Exp $
*/

package org.eclipse.m2m.internal.qvt.oml.cst.parser;

public class QvtOpLexerprs implements lpg.lpgjavaruntime.ParseTable, QvtOpLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,3,3,3,1,2,2,1,1,5,
            1,1,1,1,1,1,1,1,1,1,
            2,2,2,1,1,1,1,2,1,1,
            1,2,1,1,1,1,2,1,1,2,
            2,3,2,2,0,1,2,2,2,1,
            2,3,2,3,3,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2,
            1,2,2,2,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,2,1,2,
            0,1,1,1,2,1,2,2,1,2,
            2,2,3,1,3,1,1,1,1,1,
            1,3,0,1,2
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,13,21,14,23,24,
            24,24,26,26,26,26,27,27,25,25,
            7,7,29,15,15,15,8,8,8,8,
            8,2,2,2,2,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,1,1,1,
            1,1,1,1,1,1,1,17,17,28,
            28,22,22,22,22,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,31,31,31,31,31,
            31,31,31,31,31,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,19,19,9,9,32,32,32,32,
            6,16,16,16,16,30,30,30,30,30,
            30,30,30,33,33,33,33,20,20,20,
            20,20,10,10,10,10,10,34,34,12,
            12,11,11,21,21,21,21,21,21,21,
            21,21,21,21,21,21,10,10,10,20,
            20,20,21,35,35,25,707,453,451,451,
            451,994,295,424,454,1044,51,297,295,34,
            36,909,133,132,132,132,903,306,301,312,
            8,419,1111,1107,387,427,307,455,455,455,
            455,455,455,390,1110,6,7,1103,407,456,
            456,456,456,456,456,455,455,456,456,438,
            376,1055,51,407,456,456,456,456,456,456,
            369,416,456,456,443,376,407,456,456,456,
            456,456,456,1068,51,456,456,447,376,507,
            258,258,258,258,258,258,607,260,260,260,
            260,260,260,1079,51,260,260,1066,258,258,
            1,44,44,44,44,130,1101,1102,44,809,
            230,230,230,230,230,1108,44,1115,44,1104,
            102,42,42,42,42,1105,1109,410,42,203,
            49,49,49,49,978,51,42,791,42,1011,
            341,230,230,1022,363,1122,341,1124,384,41,
            363,291,40,584,291,1033,383,1125,1126,49,
            49,904,383,1128,1129,1131,1106,459,459
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,98,99,
            100,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,33,34,35,36,37,38,
            39,40,41,42,43,44,45,46,47,48,
            49,50,51,52,53,54,55,56,57,58,
            59,60,61,62,63,64,65,66,67,68,
            69,70,71,72,73,74,75,76,77,78,
            79,80,81,82,83,84,85,86,87,88,
            89,90,91,92,93,94,95,96,97,98,
            99,100,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,0,0,96,97,
            98,99,100,0,0,103,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,0,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,97,98,99,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,101,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,97,98,99,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,0,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,97,98,99,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,101,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,97,98,99,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            0,85,86,87,88,89,90,91,92,93,
            94,95,0,13,14,0,100,101,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,0,77,78,79,80,81,
            82,83,84,85,86,87,88,89,90,91,
            92,93,0,0,96,97,98,99,0,1,
            2,3,4,5,6,7,8,9,10,0,
            0,13,14,0,0,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,0,1,2,
            3,4,5,6,7,8,9,10,0,12,
            13,14,84,0,1,2,3,4,5,6,
            7,8,9,10,102,102,0,0,0,16,
            0,1,2,3,4,5,6,7,8,9,
            10,0,1,2,3,4,5,6,7,8,
            9,10,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,73,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,0,0,0,0,0,0,0,0,0,
            0,11,11,11,0,15,15,11,11,15,
            16,0,12,0,0,0,12,0,0,0,
            0,0,11,0,69,12,0,12,0,0,
            0,76,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,94,
            95,0,0,0,0,100,0,0,0,0,
            0,0,72,71,0,0,0,74,75,70,
            0,0,0,78,0,77,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,78,0,0,0,101,77,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,102,
            102,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            459,503,503,503,503,503,503,503,503,503,
            503,503,503,503,503,503,503,503,503,503,
            503,503,503,503,503,503,503,503,503,503,
            503,503,503,503,503,503,503,503,503,503,
            503,503,503,503,503,503,503,503,503,503,
            503,503,503,503,503,503,503,503,503,503,
            503,503,503,503,503,503,503,503,503,503,
            503,503,503,503,502,410,503,503,503,503,
            503,503,503,503,503,503,503,503,503,503,
            503,503,503,503,503,503,503,503,503,503,
            503,459,501,501,501,501,501,501,501,501,
            501,501,501,501,501,501,501,501,501,501,
            501,501,501,501,501,501,501,501,501,501,
            501,501,501,501,501,501,501,501,501,501,
            501,501,501,501,501,501,501,501,501,501,
            501,501,501,501,501,501,501,501,501,501,
            501,501,501,501,501,501,501,501,501,501,
            501,501,501,501,501,469,506,501,501,501,
            501,501,501,501,501,501,501,501,501,501,
            501,501,501,501,501,501,501,501,501,501,
            501,501,9,508,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,508,508,508,508,508,
            508,508,508,508,508,508,45,459,508,508,
            508,508,508,459,459,508,283,455,455,455,
            455,455,455,455,455,455,455,455,455,455,
            455,455,455,455,455,455,455,455,455,455,
            455,455,455,455,455,455,455,455,455,455,
            455,455,455,455,455,455,455,455,455,455,
            455,455,455,455,455,455,455,455,455,455,
            455,455,455,455,455,455,455,455,455,455,
            455,455,455,455,455,455,455,455,455,455,
            455,455,455,459,455,455,455,455,455,455,
            455,455,455,455,455,455,455,455,455,455,
            455,455,455,455,455,399,261,456,456,456,
            456,456,456,456,456,456,456,456,456,456,
            456,456,456,456,456,456,456,456,456,456,
            456,456,456,456,456,456,456,456,456,456,
            456,456,456,456,456,456,456,456,456,456,
            456,456,456,456,456,456,456,456,456,456,
            456,456,456,456,456,456,456,456,456,456,
            456,456,456,456,456,456,456,456,456,456,
            456,456,456,456,463,456,456,456,456,456,
            456,456,456,456,456,456,456,456,456,456,
            456,456,456,456,456,399,284,717,717,717,
            717,717,717,717,717,717,717,717,717,717,
            717,717,717,717,717,717,717,717,717,717,
            717,717,717,717,717,717,717,717,717,717,
            717,717,717,717,717,717,717,717,717,717,
            717,717,717,717,717,717,717,717,717,717,
            717,717,717,717,717,717,717,717,717,717,
            717,717,717,717,717,717,717,717,717,717,
            717,717,717,459,717,717,717,717,717,717,
            717,717,717,717,717,717,717,717,717,717,
            717,717,717,717,717,399,262,719,719,719,
            719,719,719,719,719,719,719,719,719,719,
            719,719,719,719,719,719,719,719,719,719,
            719,719,719,719,719,719,719,719,719,719,
            719,719,719,719,719,719,719,719,719,719,
            719,719,719,719,719,719,719,719,719,719,
            719,719,719,719,719,719,719,719,719,719,
            719,719,719,719,719,719,719,719,719,719,
            719,719,719,719,462,719,719,719,719,719,
            719,719,719,719,719,719,719,719,719,719,
            719,719,719,719,719,399,459,453,453,453,
            453,453,453,453,453,453,453,479,407,451,
            451,397,415,451,451,451,451,451,451,451,
            451,451,451,451,451,451,451,451,451,451,
            451,451,451,451,451,451,451,451,451,451,
            451,451,451,451,451,451,451,451,451,451,
            451,451,451,451,451,451,451,451,451,451,
            451,451,451,451,451,454,324,327,396,405,
            409,473,454,316,356,488,313,722,328,733,
            8,492,485,486,483,484,725,489,475,476,
            454,454,459,291,291,459,454,343,459,689,
            689,689,689,689,689,689,689,689,689,689,
            689,689,689,689,689,689,689,689,689,689,
            689,689,689,689,689,689,689,689,689,689,
            689,689,689,689,689,689,689,689,689,689,
            689,689,689,689,689,689,689,689,689,689,
            689,689,689,689,689,689,689,689,689,689,
            689,689,689,689,689,689,689,689,689,689,
            689,689,689,689,459,689,689,689,689,689,
            689,689,689,689,689,689,689,689,689,689,
            689,689,459,131,689,689,689,689,1,592,
            592,592,592,592,592,592,592,592,592,459,
            459,591,591,459,459,591,591,591,591,591,
            591,591,591,591,591,591,591,591,591,591,
            591,591,591,591,591,591,591,591,591,591,
            591,591,591,591,591,591,591,591,591,591,
            591,591,591,591,591,591,591,591,591,591,
            591,591,591,591,591,591,591,38,510,510,
            510,510,510,510,510,510,510,510,459,1834,
            291,291,593,459,295,295,295,295,295,295,
            295,295,295,295,458,1,459,459,459,445,
            459,341,341,341,341,341,341,341,341,341,
            341,459,363,363,363,363,363,363,363,363,
            363,363,459,383,383,383,383,383,383,383,
            383,383,383,53,510,510,510,510,510,510,
            510,510,510,510,52,510,510,510,510,510,
            510,510,510,510,510,11,433,55,510,510,
            510,510,510,510,510,510,510,510,54,510,
            510,510,510,510,510,510,510,510,510,38,
            429,429,429,429,429,429,429,429,429,429,
            19,18,31,15,13,259,269,12,459,264,
            5,481,480,726,35,482,731,729,727,487,
            507,32,437,35,459,37,448,50,129,459,
            257,459,734,459,589,496,459,732,459,459,
            459,589,459,459,459,459,459,459,459,459,
            459,459,459,459,459,459,459,459,459,589,
            589,459,459,459,459,589,459,459,459,459,
            459,459,730,435,459,459,459,744,297,724,
            459,459,459,262,459,741,459,459,459,459,
            459,459,459,459,459,459,459,459,459,459,
            459,459,461,459,459,459,262,284,459,459,
            459,459,459,459,459,459,459,459,459,459,
            459,459,459,459,459,459,459,459,459,38,
            11
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 47,
           NT_OFFSET         = 103,
           LA_STATE_OFFSET   = 744,
           MAX_LA            = 2,
           NUM_RULES         = 285,
           NUM_NONTERMINALS  = 36,
           NUM_SYMBOLS       = 139,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 286,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 102,
           EOLT_SYMBOL       = 104,
           ACCEPT_ACTION     = 458,
           ERROR_ACTION      = 459;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
